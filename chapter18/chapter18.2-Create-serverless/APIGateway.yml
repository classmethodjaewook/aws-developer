AWSTemplateFormatVersion: "2010-09-09"
Description: Create API Gateway & Lambda
# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------# 
Parameters:
  SystemName:
    Description: "System name of each resource names."
    Type: String
    Default: "gr"
  EnvName:
    Description: "Environment name of each resource names."
    Type: String
    Default: "product"

# ------------------------------------------------------------#
#  Create Lambda
# ------------------------------------------------------------#
Resources : 
  InputDataLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${SystemName}-${EnvName}-InputData
      Code:
        ZipFile: |
          import boto3
          import json
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table("gr-product-db")

          def lambda_handler(event, context):

              inserted_data = {
                  'id': event['id'],
                  'name': event['name'],
                  'description': event['description'],
                  # 필요한 경우 필드 추가
              }

              table.put_item(Item=inserted_data)

              return {
                  'statusCode': 200,
                  'body': json.dumps(inserted_data)
              }
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: python3.12
      Timeout: 30

  GetDataLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${SystemName}-${EnvName}-GetData
      Code:
        ZipFile: |
          import boto3
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table("gr-product-db")

          def lambda_handler(event, context):
              response = table.scan()
              return response['Items']
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: python3.12
      Timeout: 30

  LambdaIAMRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      RoleName: !Sub ${SystemName}-${EnvName}-dynamodbrole
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole"

  LambdaInvokePermissionInputData:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref InputDataLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/

  LambdaInvokePermissionGet:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetDataLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/

# ------------------------------------------------------------#
#  Create REST API 
# ------------------------------------------------------------#
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${SystemName}-${EnvName}-api
      EndpointConfiguration:
        Types:
          - REGIONAL

# ------------------------------------------------------------#
#  Create API Gateway Method 
# ------------------------------------------------------------#
  ApiGatewayGETMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: 
        Fn::GetAtt: [ApiGatewayRestApi, RootResourceId]
      RestApiId:
        Ref: ApiGatewayRestApi
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                - GetDataLambdaFunction
                - Arn
              - "/invocations"
        IntegrationResponses:
              - StatusCode: 200
                ResponseParameters:
                  method.response.header.Access-Control-Allow-Origin: "'*'"
                  method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                  method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
  ApiGatewayPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: 
        Fn::GetAtt: [ApiGatewayRestApi, RootResourceId]
      RestApiId:
        Ref: ApiGatewayRestApi
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                - InputDataLambdaFunction
                - Arn
              - "/invocations"
        IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Origin: "'*'"
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ApiGatewayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: 
        Fn::GetAtt: [ApiGatewayRestApi, RootResourceId]
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: OPTIONS
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

# ------------------------------------------------------------#
#  Create API Gateway Deployment 
# ------------------------------------------------------------#
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Sub ${SystemName}-${EnvName}-stage
    DependsOn: 
      - ApiGatewayGETMethod
      - ApiGatewayPOSTMethod
      - ApiGatewayOptionsMethod